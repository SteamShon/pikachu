// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  role                    String                    @default("ADMIN")
  accounts                Account[]
  sessions                Session[]
  ownedCampaigns          Campaign[]                @relation("ownedCampaigns")
  createdCampaigns        Campaign[]                @relation("createdCampaigns")
  ownedCreatives          Creative[]                @relation("ownedCreatives")
  createdCreatives        Creative[]                @relation("createdCreatives")
  ownedCustomsets         Customset[]               @relation("ownedCustomsets")
  createdCustomsets       Customset[]               @relation("createdCustomsets")
  advertisersOnPlacements AdvertisersOnPlacements[]
  cubes                   Cube[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id              String           @id @default(cuid())
  name            String
  description     String?
  placementGroups PlacementGroup[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([name])
}

model PlacementGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?

  placements Placement[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([serviceId, name])
}

model Placement {
  id               String          @id @default(cuid())
  name             String
  description      String?
  PlacementGroup   PlacementGroup? @relation(fields: [placementGroupId], references: [id])
  placementGroupId String?

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  campaign                Campaign[]
  AdvertisersOnPlacements AdvertisersOnPlacements[]

  @@unique([placementGroupId, name])
}

model AdvertisersOnPlacements {
  advertiser   User      @relation(fields: [advertiserId], references: [id])
  advertiserId String
  placement    Placement @relation(fields: [placementId], references: [id])
  placementId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@id([advertiserId, placementId])
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  ownedBy     User      @relation("ownedCampaigns", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdBy   User      @relation("createdCampaigns", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  adGroups    AdGroup[]
  placement   Placement @relation(fields: [placementId], references: [id])
  placementId String
  startedAt   DateTime
  endAt       DateTime
  status      String    @default("CREATED")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([ownerId, placementId, name])
}

model AdGroup {
  id          String                @id @default(cuid())
  name        String
  description String?
  campaign    Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  filter      String?
  creatives   CreativesOnAdGroups[]
  status      String                @default("CREATED")
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@unique([campaignId, name])
}

model Creative {
  id          String                @id @default(cuid())
  name        String
  description String?
  ownedBy     User                  @relation("ownedCreatives", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdBy   User                  @relation("createdCreatives", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  adGroups    CreativesOnAdGroups[]
  status      String                @default("CREATED")
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@unique([ownerId, name])
}

model CreativesOnAdGroups {
  adGroup    AdGroup  @relation(fields: [adGroupId], references: [id])
  adGroupId  String
  creative   Creative @relation(fields: [creativeId], references: [id])
  creativeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([adGroupId, creativeId])
}

model Customset {
  id              String         @id @default(cuid())
  name            String
  description     String?
  ownedBy         User           @relation("ownedCustomsets", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  createdBy       User           @relation("createdCustomsets", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId       String
  info            CustomsetInfo?
  status          String         @default("CREATED")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customsetInfoId String

  @@unique([ownerId, name])
}

model CustomsetInfo {
  id          String    @id @default(cuid())
  customset   Customset @relation(fields: [customsetId], references: [id], onDelete: Cascade)
  customsetId String    @unique
  filePath    String
  config      String
  cube        Cube?     @relation(fields: [cubeId], references: [id])
  cubeId      String?
  filter      String?
}

model Cube {
  id            String          @id @default(cuid())
  name          String
  ownedBy       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  CustomsetInfo CustomsetInfo[]
}
