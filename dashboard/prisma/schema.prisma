// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// generator erd {
//     provider = "prisma-erd-generator"
// }

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]

    // ownedCampaigns          Campaign[]                @relation("ownedCampaigns")
    // createdCampaigns        Campaign[]                @relation("createdCampaigns")
    // createdAdGroups         AdGroup[]                 @relation("createdAdGroups")
    // createdCreatives        Creative[]                @relation("createdCreatives")
    // ownedCustomsets         Customset[]               @relation("ownedCustomsets")
    createdCustomsets       Customset[]               @relation("createdCustomsets")
    advertisersOnPlacements AdvertisersOnPlacements[]
    // createdContentTypes     ContentType[]             @relation("createdContentTypes")

    //createdPlacementGroups PlacementGroup[]  @relation("createdPlacementGroups")
    // createdPlacements Placement[]       @relation("createdPlacements")
    services UsersOnServices[]
    contents Content[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Service {
    id              String            @id @default(cuid())
    name            String
    description     String?
    placementGroups PlacementGroup[]
    contentTypes    ContentType[]
    users           UsersOnServices[]
    status          String            @default("CREATED")
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    customsets      Customset[]
    cubeConfigs     CubeConfig[]

    @@unique([name])
}

model UsersOnServices {
    service    Service  @relation(fields: [serviceId], references: [id])
    serviceId  String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    role       String
    assignedAt DateTime @default(now())

    @@id([serviceId, userId])
}

model PlacementGroup {
    id          String      @id @default(cuid())
    name        String
    description String?
    service     Service?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId   String?
    //createdBy   User        @relation("createdPlacementGroups", fields: [creatorId], references: [id], onDelete: Cascade)
    //creatorId   String
    placements  Placement[]
    status      String      @default("CREATED")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    // User        User?       @relation(fields: [userId], references: [id])
    // userId      String?

    @@unique([serviceId, name])
}

model Placement {
    id                      String                    @id @default(cuid())
    name                    String
    description             String?
    placementGroup          PlacementGroup?           @relation(fields: [placementGroupId], references: [id])
    placementGroupId        String?
    campaigns               Campaign[]
    AdvertisersOnPlacements AdvertisersOnPlacements[]
    contentType             ContentType               @relation(fields: [contentTypeId], references: [id])
    contentTypeId           String
    // createdBy               User                      @relation("createdPlacements", fields: [creatorId], references: [id], onDelete: Cascade)
    // creatorId               String
    status                  String                    @default("CREATED")
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt

    @@unique([placementGroupId, name])
}

model ContentType {
    id            String      @id @default(cuid())
    name          String
    description   String?
    service       Service?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId     String?
    // createdBy   User        @relation("createdContentTypes", fields: [creatorId], references: [id], onDelete: Cascade)
    // creatorId   String
    schema        String?
    uiSchema      String?
    defaultValues String?
    placements    Placement[]
    contents      Content[]
    status        String      @default("CREATED")
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@unique([serviceId, name])
}

model AdvertisersOnPlacements {
    advertiser   User      @relation(fields: [advertiserId], references: [id])
    advertiserId String
    placement    Placement @relation(fields: [placementId], references: [id])
    placementId  String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    @@id([advertiserId, placementId])
}

model Campaign {
    id          String    @id @default(cuid())
    name        String
    description String?
    // ownedBy     User      @relation("ownedCampaigns", fields: [ownerId], references: [id], onDelete: Cascade)
    // ownerId     String
    // createdBy   User      @relation("createdCampaigns", fields: [creatorId], references: [id], onDelete: Cascade)
    // creatorId   String
    adGroups    AdGroup[]
    placement   Placement @relation(fields: [placementId], references: [id])
    placementId String
    type        String    @default("DISPLAY")
    startedAt   DateTime?
    endAt       DateTime?
    status      String    @default("CREATED")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([placementId, name])
}

model AdGroup {
    id          String     @id @default(cuid())
    name        String
    description String?
    campaign    Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId  String
    filter      String?
    creatives   Creative[]
    // createdBy   User       @relation("createdAdGroups", fields: [creatorId], references: [id], onDelete: Cascade)
    // creatorId   String
    status      String     @default("CREATED")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@unique([campaignId, name])
}

model Creative {
    id          String   @id @default(cuid())
    name        String
    description String?
    adGroup     AdGroup  @relation(fields: [adGroupId], references: [id], onDelete: Cascade)
    adGroupId   String
    //createdBy   User     @relation("createdCreatives", fields: [creatorId], references: [id], onDelete: Cascade)
    //creatorId   String
    content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
    contentId   String
    status      String   @default("CREATED")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([adGroupId, name])
}

model Content {
    id            String       @id @default(cuid())
    name          String
    description   String?
    contentType   ContentType? @relation(fields: [contentTypeId], references: [id])
    contentTypeId String?
    values        String
    creatives     Creative[]
    createdBy     User         @relation(fields: [creatorId], references: [id])
    creatorId     String
    status        String       @default("CREATED")
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    userId        String?

    @@unique([contentTypeId, name])
}

model Customset {
    id              String        @id @default(cuid())
    name            String
    description     String?
    service         Service?      @relation(fields: [serviceId], references: [id])
    serviceId       String?
    // ownedBy         User           @relation("ownedCustomsets", fields: [ownerId], references: [id], onDelete: Cascade)
    // ownerId         String
    createdBy       User          @relation("createdCustomsets", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId       String
    customsetInfo   CustomsetInfo @relation(fields: [customsetInfoId], references: [id], onDelete: Cascade)
    customsetInfoId String        @unique
    status          String        @default("CREATED")
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // @@unique([ownerId, name])
    @@unique([serviceId, name])
}

model CustomsetInfo {
    id        String     @id @default(cuid())
    customset Customset?
    filePath  String
    config    String
}

model CubeConfig {
    id                String   @id @default(cuid())
    service           Service  @relation(fields: [serviceId], references: [id])
    serviceId         String
    name              String
    description       String?
    s3Region          String
    s3AccessKeyId     String
    s3SecretAccessKey String
    cubes             Cube[]
    status            String   @default("CREATED")
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([serviceId, name])
}

model Cube {
    id           String     @id @default(cuid())
    name         String
    description  String?
    cubeConfig   CubeConfig @relation(fields: [cubeConfigId], references: [id], onDelete: Cascade)
    cubeConfigId String
    s3Path       String
    status       String     @default("CREATED")
    segments     Segment[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@unique([cubeConfigId, name])
}

model Segment {
    id          String   @id @default(cuid())
    cube        Cube     @relation(fields: [cubeId], references: [id])
    cubeId      String
    name        String
    description String?
    where       String?
    population  String?
    status      String   @default("CREATED")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([cubeId, name])
}
